5/26晚上
看影片 https://www.youtube.com/watch?v=_oRJ8TNcHWo
webform 做到能修改就好
core 改版很快
打開vs 並更新 嘗試下載vs preview
修改 vs vscode 預測目錄 好讓未來一致
喔喔VS 先建立好資料夾 VScode打開資料夾 即可一同use
解決(how All Files (Solution Explorer)) 沒顯示 課程筆記.txt問題

5/27早上
網站/服務專案 -->部屬-->WEB SERVER(WINDOWS IIS)
.NET 不能誇平台 (純WINDOWS)
.NET CORE 能跨平台(WINDOWS.LINUX.macOS)
第一代 ASP =>PHP
第二代 ASP.NET WebForm
第三代 ASP.NET MVC
第四代 ASP.NET CORE MVC 

favicon.ico ->>改網頁小圖片
加入現有項目
wwwroot\favicon.png

Views/Shared/_Layout.cshtml  
---->
找到 <head> 標籤，加入這一行：

<link rel="icon" href="~/favicon.png" type="image/png" />

使用jTable 建立single page application
一個server  容許多少user ?? 10000人(會有個天花板數字)

影響網頁執行效率的前三大因素
網頁體積大
內容取得
CPU處理速度


git 一個記憶口訣：
「先拉雲端，再丟雲端」
「先提取 (箭頭往下)，再推送(箭頭往上)」

PERSONS
MVC	MODEL-VIEW(看到呈現的資料 與USER互動頁面)-CONTROLLER 
MVVM MODEL-VIEW-VIEWMODEL CONTROLLER
當MODEL 不適合 VIEW直接 顯示/編輯 的典型場合  身分驗證
IOC, 相依性注入(Dependency Injection, DI)

SQL EXPRESS LocalDB 免費 可商用 (限制 4核心 ram 1.4GB:32位元的系統/落伍 10GB)
SQL Developer Edition 免費  不可商用
SQL SERVER障礙排除...感謝ChatGPT

5/28 早上
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /> 
    @* 可以用於手機瀏覽(自動調整大小) *@
    預設安全很好(asp.net)
------------------------------
Razor文件(*.cshtml):html文件產生器

編輯 razror文件---生成(預測保護)-->html文件
    所以輸出至網頁的資料皆經編碼處理
    <form>加入防偽標籤(台鐵官網 過往沒防偽標籤 程式可透過迴圈SUBMIT搶票)

編輯html文件------>瀏覽器

用戶驗證:HTML JavaScript

用戶驗證不算驗證  有可能透過程式掠過

Server:C#
-----------------------------
用戶端驗證 體驗及時
server端驗證
如何 集中式資料驗證 / 如何 集中式錯誤處理
沒有寫名稱 預測抓index.view

注意檔案結構問題
在 ASP.NET MVC 開發中，如果網址顯示 404 或「找不到 View」錯誤，最常見原因是 Controller、View 資料夾與檔案的命名不一致。
Controller 名稱必須以 controller 結尾（兩個 l），而 View 資料夾名稱要與 Controller 名稱去掉 controller 後一致。
例如 FUN149controller，對應的 View 資料夾必須是 /Views/FUN149/，而動作 Index() 預設會找 /Views/FUN149/Index.cshtml。
若檔名、資料夾或拼字大小寫錯誤，系統就會出現「找不到 View」的錯誤。
解決方法是檢查 Controller、View 資料夾與 .cshtml 檔案是否正確命名與放置，並確定檔案已包含在專案內，重新編譯即可。

了解 錯誤訊息 自訂錯誤訊息(中/英文版)

有可能會到SHARED ERROR

為什麼會有 Views/Shared/Error.cshtml？
原理：
ASP.NET Core 尋找 View 時，會先找 /Views/{Controller名稱}/Error.cshtml
找不到時，自動往 /Views/Shared/Error.cshtml 尋找。
好處：
讓多個 Controller 都能共用同一個錯誤頁，不用每個 Controller 都放一份。

時常變動的東西 建成模組 跟外部開發 開模組

聊到 未登入頁面/已登入頁面

5/28下午
Entity Framework 工作模式總覽
------
Code First
你先寫 C# 類別，EF 幫你自動建資料表。適合新專案，表格還沒建立時。
適合 Windows Form 開發測試。
------
Database First
你先有 SQL 資料表，EF 幫你自動產生 C# 類別。適合資料庫先設計好的情境。
用 Visual Studio「加入新項目 → ADO.NET Entity Data Model → EF Designer from database」。
------
Model First
你用圖形化工具畫資料表關聯，EF 幫你產生 C# 類別和 SQL 資料表。
比較少用，主要給設計導向專案。

介紹asp.net core web 專案基本架構

layout style 除非100%樣式會用到 可以寫 (小心首頁)

如果使用SCRIPT 但宣告JQUERY在動作之後 會無法判別$

    @await RenderSectionAsync("Scripts", required: false)

@section Scripts {
    <script>
                         $(document).ready(function(){
                             alert("Hello MVC!");
                         });
    </script>
}
這樣引用即可

加入用戶端程式庫(FONT AWESOME)-->還會產生 libman.json-->可修改版本

安裝BUNDLER
精簡版code 相對來說很能除錯

5/29
可以設定 開發者模式
ASP.NET Core 內建 <environment> Tag Helper，可以自動根據開發/生產模式引用不同檔案，非常方便：
啟動專案 會粗體(也可以右鍵 專案 設定為啟動專案)
Scaffold-DbContext "Data Source=CR3-S07\SQLEXPRESS01;Initial Catalog=Northwind;Integrated Security=true;Encrypt=true;TrustServerCertificate=true;" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -t Customers -f
------------
老師新建一個資料夾

你學會了如何用 Scaffold-DbContext 將 SQL Server 資料庫結構自動產生成 C# 的 Model 與 DbContext，並透過 appsettings.json 和 Program.cs 正確設定多組資料庫連線字串。

你了解了 partial class 的設計理念與實務用法，知道如何把 Scaffold 自動產生的 code 與自己擴充的邏輯分開維護，這樣即使重跑 Scaffold，自己的自訂功能也不會被洗掉。

最後你也理解了資料庫只要一改、重跑 Scaffold 就會覆蓋原有 Model code，因此自訂邏輯一定要寫在 partial class 裡，才能讓專案維護安全又彈性。

Models\NorthwindContext.cs     ← Scaffold產生 (可被洗掉)
partial\NorthwindContext.cs    ← 你自己寫 (永遠不會被洗掉)
         │
         └─ 編譯時自動合成同一個 NorthwindContext

資料庫結構自動變成 C# 類別（Model）
DI 幫你自動拿到資料庫物件（DbContext）
Controller 負責查資料、呼叫 View
View 負責顯示 Model 裡的內容
導覽列是入口，連結所有功能
------------------

反向工程（Scaffold-DbContext）連結資料庫 → 自動產生 Model 和 DbContext
指令把資料庫的 Customers table 變成 C# 類別
在 Models 資料夾看到 Customer.cs、NorthwindContext.cs
新增 partial class（例如 NorthwindContext.Partial.cs）
你自訂的邏輯都寫這，不會被 Scaffold 洗掉
設定 appsettings.json
加上 "Northwind" 的連線字串，讓程式知道要連哪個資料庫
HomeController.cs 加入 Action
Customers() 方法查詢資料、丟到 View
--------------
@inject NorthwindContext context
<h1>客戶總數:@context.Customers.Count()人</h1>
-------------
右鍵CONTROLLER 
選取 ENTITY MVC 甚至還生成VIEW  新刪修查

5/29下午
討論 CUSTOMERSCONTROLLER 
**同步（Synchronous）和非同步（Asynchronous）**的差別簡單說就是：「要不要等到這件事做完，才能繼續做下面的事？」

為什麼要用非同步？

網站要同時處理很多請求時，非同步能避免「堵車」（例：資料庫查詢慢時也不會拖住其它用戶）。

效能比較好，伺服器可以利用等待時間去服務其他人。

.NET Core 建議 Controller 盡量都用 async/await 寫法（你現在這份就是）。

函式 盡量做非同步 async 代表這是非同步方法，await 代表這裡等資料回來但不堵住主線程。

IEnumerable->IQueryable->DBset(list)

專業解釋 + 生活化

IQueryable
「兒子列出需求，爸爸聽完後還能加條件（可加 Where/OrderBy），等真的要用的時候，爸爸才一次把所有錢（資料）給兒子。」
查詢尚未執行（延遲執行），可以一直串條件。

IEnumerable
「爸爸開始分批給錢，兒子每次要一個，爸爸就給一個。已經開始在執行給錢的動作。」
查詢開始執行，但還可以慢慢一個個消耗（foreach）。

List
「爸爸直接一大包現金全數給兒子，拿了就走，不能再多不能再少。」
查詢全部執行，所有資料都取回來、存在記憶體。

總結一句話：
IQueryable → 計畫與溝通階段（查詢尚未執行）
IEnumerable → 已經開始給資料（可以一個一個拿）
List → 全部資料一次到手（查詢已經執行且結果固定）

善用        
[HttpPost]
[ValidateAntiForgeryToken]

有時候為了 代碼可讀性 會想修改ID---->CUSTOMERID 要找出所有ID

 <td>
    <a asp-action="Edit" asp-route-id="@item.CustomerId">Edit</a> |
    <a asp-action="Details" asp-route-id="@item.CustomerId">Details</a> |
    <a asp-action="Delete" asp-route-id="@item.CustomerId">Delete</a>
</td>
cnoontroller沒寫  就會用預設的

只要你想自訂參數名，就要路由 pattern、Action 參數、超連結 route-value 全部一致

在controller上方 [Route("/Customers1/{action=Index}/{CustomersID?}")]

這其實會讓所有這個 Controller 裡的 Action 都以 /Customers1/{action}/{CustomersID?} 為路由。
這和 Program.cs 的 MapControllerRoute 是類似的功能，但會優先採用 Attribute Routing。

URLhelper

6/2下午

評估網頁
功能
美觀
用戶體驗(畫面會不會閃、換頁  AJAX呼叫才不會閃爍   HTTP呼叫 會換頁)
用快取 可加速內容取得、
快取:避免網頁做太大 常用 不常修改 取的成本高 

SELECT TAH HELPER
使用CACHETAGHELPER
快取資料原則 常用不常 取得成本高 @TIMESPAN.FROMSECONDS(60)--->60秒內瀏覽的用戶都會看到相同的日期

雙向繫結、server端 生到 客戶端

6/3早上

前端驗證「有跟沒有一樣」的意義

對的部分：安全性完全不能靠前端，因為會被繞過。

不對的部分：前端驗證可以「減少誤會」和「提升用戶體驗」。你一填錯馬上提示，使用者很快就能修正，不用等頁面重新整理。

結論：

前端驗證是體驗，後端驗證是安全。

開發時通常兩個都要做，但只有後端驗證是「絕對必要」。

資料驗證 就會引用
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
增加前端驗證 減少畫面重製 的閃爍
SPA（Single Page Application）體驗的關鍵：「前端驗證可減少頁面刷新，讓使用者感覺流暢、不會閃一下又回來、填資料壓力小」。
白名單:明列接收的欄位
黑名單:明列不接收的欄位

先白再黑

[Bind("Name,Email")]
只把 Name、Email 兩個欄位從前端表單帶進來，其他不管（防止 Overposting）。

jquery freeze header

6/3下午

限定 帳號信箱 字串長度 可以防止一些攻擊

dynamic 動態語言


ViewBag.CustomerCount = $"alert('客戶人數:{_dc.Customers.Count()}')";


@section Scripts {
    <script>
        @Html.Raw(ViewBag.CustomerCount)
    </script>
}
JAVAscript只要被編碼後就不能執行了
網頁最常見的攻擊 就是javascript

 Session Cookie 實際上只是一個包含 Session ID 的標識符，真正的數據存儲在服務器端。
 這種設計既保證了安全性（敏感數據不會暴露在客戶端），又實現了狀態管理（HTTP 本身是無狀態的）。

 6/4早上
 cookie設定介紹

 session cache cookie保存網頁狀態

三種技術的不同角色
Session（會話）：主要用於服務器端存儲用戶的臨時狀態，比如登入狀態、購物車內容、表單數據等。Session 數據存在服務器上，安全性較高。
Cookie：主要用於客戶端存儲，通常配合 Session 使用。Cookie 會存儲 Session ID，讓服務器能識別用戶。也會存儲一些用戶偏好設定。
Cache（緩存）：主要用於提升性能，存儲經常訪問的數據，比如數據庫查詢結果、計算結果等，減少重複處理。
實際應用中的組合使用
大多數 MVC 應用會這樣組合使用：
登入系統：Cookie 存儲 Session ID → Session 存儲用戶登入狀態 → Cache 緩存用戶權限信息避免重複查詢數據庫。
電商網站：Cookie 記住用戶偏好 → Session 管理購物車狀態 → Cache 緩存商品信息和價格。
內容管理系統：Cookie 保存界面設定 → Session 管理編輯狀態 → Cache 緩存文章列表和分類數據。
選擇考量因素
選擇使用哪些技術主要看需求：

數據敏感性：敏感數據用 Session，一般偏好用 Cookie
數據大小：大量數據用 Session 或 Cache，小數據用 Cookie
存續時間：需要跨瀏覽器會話保持的用 Cookie，臨時數據用 Session
性能需求：需要快速訪問的數據用 Cache

所以在實際的 MVC 項目中，這三種技術往往是互補使用的，而不是單純的選擇題。一個完整的網頁應用通常會根據不同的業務需求，合理地組合使用這些技術。

商品頁crud

PM> Scaffold-DbContext "Data Source=CR3-S07\SQLEXPRESS01;Initial Catalog=Northwind;
Integrated Security=true;Encrypt=true;TrustServerCertificate=true;
" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -t Products, Categories -f -NoOnConfiguring

別直接 ToListAsync()，除非你確定資料量極小，否則一定要加分頁。

優點： 節省記憶體、加快網頁回應、User 也容易操作。

進階： 分頁同時回傳總筆數、當前頁數等資訊到 View，就能做很棒的分頁 UI。
Products.cs 修改
        // GET: Products
        public async Task<IActionResult> Index(int page = 1, int pageSize = 20)
        {
            // 1. 先組查詢語句
            var query = _context.Products
                .Include(p => p.Category)
                .OrderBy(p => p.ProductId); // 建議排序，保證每次資料順序一致

            // 2. 計算總筆數，方便前端顯示總頁數
            var totalCount = await query.CountAsync();

            // 3. 分頁撈資料，只取目前要顯示的那一頁
            var products = await query
                .Skip((page - 1) * pageSize)
                .Take(pageSize)
                .ToListAsync();

            // 4. 可以用 ViewBag 傳分頁資訊，也可以做 ViewModel
            ViewBag.TotalCount = totalCount;
            ViewBag.Page = page;
            ViewBag.PageSize = pageSize;

            return View(products);
        }

如何顯示不同table的多個欄位?


6/4下午

如何直接套用別人的模板(start bootstrap sb admin2)
JTable 